{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport * as Location from 'expo-location';\n\nvar GeolocatorService = function GeolocatorService() {\n  _classCallCheck(this, GeolocatorService);\n};\n\nGeolocatorService.apiKey = '1a0f0a33030643ef97bfd6fc409f6b2a';\n\nGeolocatorService.getLocation = function _callee() {\n  var location, url, response, result;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n        case 2:\n          location = _context.sent;\n\n          if (!location) {\n            _context.next = 13;\n            break;\n          }\n\n          url = \"https://api.opencagedata.com/geocode/v1/json?key=\" + GeolocatorService.apiKey + \"&q=\" + location.coords.latitude + \",\" + location.coords.longitude + \"&pretty=1&no_annotations=1\";\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 7:\n          response = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 10:\n          result = _context.sent;\n          console.log('ADDRESS GEOCODE is BACK!! => ' + result.results[0].formatted);\n          return _context.abrupt(\"return\", result.results[0].formatted);\n\n        case 13:\n          return _context.abrupt(\"return\", 'blank');\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport { GeolocatorService as default };","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/src/geolocator/index.ts"],"names":["Location","GeolocatorService","apiKey","getLocation","getCurrentPositionAsync","location","url","coords","latitude","longitude","fetch","response","json","result","console","log","results","formatted"],"mappings":";;AAAA,OAAO,KAAKA,QAAZ,MAA0B,eAA1B;;IAGqBC,iB;;;;AAAAA,iB,CACZC,M,GAAS,kC;;AADGD,iB,CAEZE,W,GAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACIH,QAAQ,CAACI,uBAAT,CAAiC,EAAjC,CADJ;;AAAA;AACbC,UAAAA,QADa;;AAAA,eAGhBA,QAHgB;AAAA;AAAA;AAAA;;AAIXC,UAAAA,GAJW,yDAI+CL,iBAAiB,CAACC,MAJjE,WAI6EG,QAAQ,CAACE,MAAT,CAAgBC,QAJ7F,SAIyGH,QAAQ,CAACE,MAAT,CAAgBE,SAJzH;AAAA;AAAA,2CAMMC,KAAK,CAACJ,GAAD,CANX;;AAAA;AAMXK,UAAAA,QANW;AAAA;AAAA,2CAOIA,QAAQ,CAACC,IAAT,EAPJ;;AAAA;AAOXC,UAAAA,MAPW;AASjBC,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCF,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBC,SAAhE;AATiB,2CAWVJ,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBC,SAXR;;AAAA;AAAA,2CAcZ,OAdY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C;;SAFFhB,iB","sourcesContent":["import * as Location from 'expo-location';\r\n\r\n// OpenCageData\r\nexport default class GeolocatorService {\r\n  static apiKey = '1a0f0a33030643ef97bfd6fc409f6b2a';\r\n  static getLocation = async () => {\r\n    const location = await Location.getCurrentPositionAsync({});\r\n\r\n    if(location) {\r\n      const url = `https://api.opencagedata.com/geocode/v1/json?key=${GeolocatorService.apiKey}&q=${location.coords.latitude},${location.coords.longitude}&pretty=1&no_annotations=1`;\r\n      \r\n      const response = await fetch(url);\r\n      const result = await response.json();\r\n\r\n      console.log('ADDRESS GEOCODE is BACK!! => ' + result.results[0].formatted);\r\n\r\n      return result.results[0].formatted;\r\n    }\r\n\r\n    return 'blank';\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}