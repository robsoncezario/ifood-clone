{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\robson\\\\Desktop\\\\ifood-react-native\\\\app\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport loadFontsAsync from \"./src/theme/fonts\";\nimport BottomNavigationBar from \"./src/screens/navigation\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nvar client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql/'\n});\n\nvar App = function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setReady = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(loadFontsAsync().then(function () {\n                setReady(true);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return React.createElement(React.Fragment, null, isReady === true && React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, React.createElement(RecoilRoot, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, React.createElement(BottomNavigationBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/App.tsx"],"names":["React","useState","useEffect","RecoilRoot","ApolloProvider","ApolloClient","loadFontsAsync","BottomNavigationBar","client","uri","App","isReady","setReady","then","flex"],"mappings":";;;AACA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,QAGO,OAHP;AAIA,SAASC,UAAT,QAA2B,QAA3B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,OAAOC,cAAP;AACA,OAAOC,mBAAP;;AAGA,IAAMC,MAAM,GAAG,IAAIH,YAAJ,CAAiB;AAACI,EAAAA,GAAG,EAAE;AAAN,CAAjB,CAAf;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBACYT,QAAQ,CAAC,KAAD,CADpB;AAAA;AAAA,MACTU,OADS;AAAA,MACAC,QADA;;AAGhBV,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACOI,cAAc,GAAGO,IAAjB,CAAsB,YAAM;AAChCD,gBAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,eAFK,CADP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAKD,GANQ,EAMN,EANM,CAAT;AAQA,SACE,0CACGD,OAAO,KAAK,IAAZ,IACC,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE;AAACM,MAAAA,IAAI,EAAE;AAAP,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAFJ,CADF;AAaD,CAxBD;;AA0BA,eAAeJ,GAAf","sourcesContent":["\nimport React, { \n  useState,\n  useEffect \n} from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport loadFontsAsync from './src/theme/fonts';\nimport BottomNavigationBar from './src/screens/navigation';\nimport { SafeAreaView } from 'react-native';\n\nconst client = new ApolloClient({uri: 'http://localhost:4000/graphql/'});\n\nconst App = () => {\n  const [isReady, setReady] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      await loadFontsAsync().then(() => {\n        setReady(true);\n      });\n    })(); \n  }, []);\n\n  return (\n    <>\n      {isReady === true && (\n        <ApolloProvider client={client}>\n          <RecoilRoot>\n            <SafeAreaView style={{flex: 1}}>\n              <BottomNavigationBar />\n            </SafeAreaView>\n          </RecoilRoot>\n        </ApolloProvider>\n      )}\n    </>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}