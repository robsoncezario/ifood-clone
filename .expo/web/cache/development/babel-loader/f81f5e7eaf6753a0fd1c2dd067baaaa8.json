{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\robson\\\\Desktop\\\\ifood-react-native\\\\app\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport loadFontsAsync from \"./src/theme/fonts\";\n\nvar App = function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setReady = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(loadFontsAsync());\n\n            case 2:\n              setReady(true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return React.createElement(React.Fragment, null, isReady === true && React.createElement(RecoilRoot, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, \"iFood, inicio\"), React.createElement(StatusBar, {\n    style: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default App;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontFamily: 'SulSans-Bold',\n    fontSize: 40,\n    color: 'Black'\n  }\n});","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/App.tsx"],"names":["React","useState","useEffect","RecoilRoot","StatusBar","loadFontsAsync","App","isReady","setReady","styles","container","title","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","fontFamily","fontSize","color"],"mappings":";;;AACA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,QAGO,OAHP;AAIA,SAASC,UAAT,QAA2B,QAA3B;AAEA,SAASC,SAAT,QAA0B,iBAA1B;;;;AAGA,OAAOC,cAAP;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBAKYL,QAAQ,CAAC,KAAD,CALpB;AAAA;AAAA,MAKTM,OALS;AAAA,MAKAC,QALA;;AAOhBN,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACOG,cAAc,EADrB;;AAAA;AAECG,cAAAA,QAAQ,CAAC,IAAD,CAAR;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,SACE,0CACGD,OAAO,KAAK,IAAZ,IACC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CAFJ,CADF;AAYD,CA1BD;;AA4BA,eAAeL,GAAf;AAEA,IAAMG,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAQ/BN,EAAAA,KAAK,EAAE;AACLO,IAAAA,UAAU,EAAE,cADP;AAELC,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,KAAK,EAAE;AAHF;AARwB,CAAlB,CAAf","sourcesContent":["\nimport React, { \n  useState,\n  useEffect \n} from 'react';\nimport { RecoilRoot } from 'recoil';\n\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport loadFontsAsync from './src/theme/fonts';\n\nconst App = () => {\n  /*\n    Sei que poderia ter usado o redux ou o mobx, mas fui de Recoil pois gostei muito dele.\n  */\n\n  const [isReady, setReady] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      await loadFontsAsync();\n      setReady(true);\n    })(); \n  }, []);\n\n  return (\n    <>\n      {isReady === true && (\n        <RecoilRoot>\n          <View style={styles.container}>\n            <Text style={styles.title}>iFood, inicio</Text>\n            <StatusBar style=\"auto\" />\n          </View>\n        </RecoilRoot>\n      )}\n    </>\n  )\n}\n\nexport default App;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n  title: {\n    fontFamily: 'SulSans-Bold',\n    fontSize: 40,\n    color: 'Black'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}