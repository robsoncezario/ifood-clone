{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robson\\\\Desktop\\\\ifood-react-native\\\\app\\\\src\\\\components\\\\Restaurant\\\\RestaurantDetails\\\\index.tsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useQuery } from '@apollo/client';\nimport { useRecoilValue } from 'recoil';\nimport { fetchRestaurantDetails } from \"./queries\";\nimport OrdersView from \"./OrdersView\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport * as atoms from \"../../../geolocator/atom\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flexDirection: 'column'\n  },\n  scrollView: {\n    width: '100%',\n    flex: 1,\n    paddingLeft: 25,\n    paddingRight: 25,\n    paddingTop: 14\n  },\n  headerContainer: {\n    paddingTop: 10,\n    paddingBottom: 10,\n    width: '100%'\n  },\n  textContainer: {\n    flex: 1,\n    width: '100%',\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    flexDirection: 'column'\n  },\n  name: {\n    fontFamily: 'SulSans-Regular',\n    color: 'rgb(62, 62, 62)',\n    fontSize: 20\n  },\n  description: {\n    fontFamily: 'SulSans-Regular',\n    color: 'rgb(113, 113, 113)',\n    fontSize: 14\n  }\n});\n\nvar RestaurantDetails = function RestaurantDetails(_ref) {\n  var _address$getDistanceB, _data$fetchRestaurant, _restaurant$category, _data$fetchRestaurant2;\n\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var restaurant = route.params.restaurant;\n  var address = useRecoilValue(atoms.addressState);\n  var dist = ((_address$getDistanceB = address == null ? void 0 : address.getDistanceBetween(restaurant.address)) != null ? _address$getDistanceB : 0) / 1000;\n\n  var _useQuery = useQuery(fetchRestaurantDetails, {\n    variables: {\n      restaurantId: restaurant.id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.scrollView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.headerContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.textContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, data == null ? void 0 : (_data$fetchRestaurant = data.fetchRestaurantDetails) == null ? void 0 : _data$fetchRestaurant.name), React.createElement(Text, {\n    style: styles.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, restaurant == null ? void 0 : (_restaurant$category = restaurant.category) == null ? void 0 : _restaurant$category.name, \" \\u2022 \", restaurant == null ? void 0 : restaurant.minDeliveryInterval, \" - \", restaurant == null ? void 0 : restaurant.maxDeliveryInterval, \" min \\u2022 \", dist.toFixed(1), \" km\"))), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, error == null ? void 0 : error.message), React.createElement(OrdersView, {\n    title: \"Menu\",\n    items: data == null ? void 0 : (_data$fetchRestaurant2 = data.fetchRestaurantDetails) == null ? void 0 : _data$fetchRestaurant2.orders,\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default RestaurantDetails;","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/src/components/Restaurant/RestaurantDetails/index.tsx"],"names":["React","useQuery","useRecoilValue","fetchRestaurantDetails","OrdersView","ScrollView","atoms","styles","StyleSheet","create","container","flex","backgroundColor","display","alignItems","justifyContent","flexDirection","scrollView","width","paddingLeft","paddingRight","paddingTop","headerContainer","paddingBottom","textContainer","name","fontFamily","color","fontSize","description","RestaurantDetails","route","navigation","restaurant","params","address","addressState","dist","getDistanceBetween","variables","restaurantId","id","data","error","category","minDeliveryInterval","maxDeliveryInterval","toFixed","message","orders"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { \r\n  StyleSheet,\r\n  Text,\r\n  View\r\n} from 'react-native';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useRecoilValue } from 'recoil';\r\n\r\nimport { fetchRestaurantDetails } from './queries';\r\n\r\nimport OrdersView from './OrdersView';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport Restaurant from '../../../models/Restaurant/model';\r\n\r\nimport * as atoms from '../../../geolocator/atom';\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-start',\r\n    flexDirection: 'column'\r\n  },\r\n\r\n  scrollView: {\r\n    width: '100%',\r\n    flex: 1,\r\n    paddingLeft: 25,\r\n    paddingRight: 25,\r\n    paddingTop: 14\r\n  },\r\n\r\n  headerContainer: {\r\n    paddingTop: 10,\r\n    paddingBottom: 10,\r\n    width: '100%'\r\n  },\r\n\r\n  textContainer: {\r\n    flex: 1,\r\n    width: '100%',\r\n    display: 'flex',\r\n    alignItems: 'flex-start',\r\n    justifyContent: 'flex-start',\r\n    flexDirection: 'column'\r\n  },\r\n\r\n  name: {\r\n    fontFamily: 'SulSans-Regular',\r\n    color: 'rgb(62, 62, 62)',\r\n    fontSize: 20\r\n  },\r\n\r\n  description: {\r\n    fontFamily: 'SulSans-Regular',\r\n    color: 'rgb(113, 113, 113)',\r\n    fontSize: 14   \r\n  }\r\n});\r\n\r\nconst RestaurantDetails = ({route, navigation} : any) => {\r\n  const restaurant: Restaurant = route.params.restaurant as Restaurant;\r\n  const address = useRecoilValue(atoms.addressState);\r\n  const dist = (address?.getDistanceBetween(restaurant.address) ?? 0) / 1000;\r\n  \r\n  const {data, error} = useQuery(fetchRestaurantDetails, {\r\n    variables: {\r\n      restaurantId: restaurant.id\r\n    }\r\n  });\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <ScrollView style={styles.scrollView}>\r\n        <View style={styles.headerContainer}>\r\n          <View style={styles.textContainer}>\r\n            <Text style={styles.name}>{data?.fetchRestaurantDetails?.name}</Text>\r\n            <Text style={styles.description}>{restaurant?.category?.name} â€¢ {restaurant?.minDeliveryInterval} - {restaurant?.maxDeliveryInterval} min â€¢ {dist.toFixed(1)} km</Text>\r\n\r\n          </View>\r\n        </View>\r\n\r\n        <Text>{error?.message}</Text>\r\n\r\n        <OrdersView\r\n          title='Menu'\r\n          items={data?.fetchRestaurantDetails?.orders}\r\n          navigation={navigation} />\r\n      </ScrollView>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default RestaurantDetails;"]},"metadata":{},"sourceType":"module"}