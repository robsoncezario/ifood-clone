{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar Address = function () {\n  function Address(latitude, longitude, postalCode, number, street, neighborhood, city, state, country, countryCode, updatedAt, createdAt) {\n    _classCallCheck(this, Address);\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.postalCode = postalCode;\n    this.number = number;\n    this.street = street;\n    this.neighborhood = neighborhood;\n    this.city = city;\n    this.state = state;\n    this.country = country;\n    this.countryCode = countryCode;\n    this.updatedAt = updatedAt;\n    this.createdAt = createdAt;\n  }\n\n  _createClass(Address, [{\n    key: \"toJson\",\n    value: function toJson() {\n      return {\n        latitude: this == null ? void 0 : this.latitude,\n        longitude: this == null ? void 0 : this.longitude,\n        postalCode: this == null ? void 0 : this.postalCode,\n        number: this == null ? void 0 : this.number,\n        street: this == null ? void 0 : this.street,\n        neighborhood: this == null ? void 0 : this.neighborhood,\n        city: this == null ? void 0 : this.city,\n        state: this == null ? void 0 : this.state,\n        country: this == null ? void 0 : this.country,\n        countryCode: this == null ? void 0 : this.countryCode,\n        updatedAt: this == null ? void 0 : this.updatedAt,\n        createdAt: this == null ? void 0 : this.createdAt\n      };\n    }\n  }], [{\n    key: \"fromJson\",\n    value: function fromJson(json) {\n      return new Address(json == null ? void 0 : json.latitude, json == null ? void 0 : json.longitude, json == null ? void 0 : json.postalCode, json == null ? void 0 : json.number, json == null ? void 0 : json.street, json == null ? void 0 : json.neighborhood, json == null ? void 0 : json.city, json == null ? void 0 : json.state, json == null ? void 0 : json.country, json == null ? void 0 : json.countryCode, new Date(json == null ? void 0 : json.updatedAt), new Date(json == null ? void 0 : json.createdAt));\n    }\n  }, {\n    key: \"fromGeocoder\",\n    value: function fromGeocoder(geoData) {\n      var _geoData$components, _geoData$components2, _geoData$components3, _geoData$components4, _geoData$components5, _geoData$components6, _geoData$components7, _geoData$components8;\n\n      var now = new Date();\n      return new Address(geoData.geometry.lat, geoData.geometry.lng, (_geoData$components = geoData.components) == null ? void 0 : _geoData$components.postcode, (_geoData$components2 = geoData.components) == null ? void 0 : _geoData$components2.house_number, (_geoData$components3 = geoData.components) == null ? void 0 : _geoData$components3.road, (_geoData$components4 = geoData.components) == null ? void 0 : _geoData$components4.suburb, (_geoData$components5 = geoData.components) == null ? void 0 : _geoData$components5.city, (_geoData$components6 = geoData.components) == null ? void 0 : _geoData$components6.state, (_geoData$components7 = geoData.components) == null ? void 0 : _geoData$components7.country, (_geoData$components8 = geoData.components) == null ? void 0 : _geoData$components8.country_code, now, now);\n    }\n  }]);\n\n  return Address;\n}();\n\nexport { Address as default };","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/src/models/Address/model.ts"],"names":["Address","latitude","longitude","postalCode","number","street","neighborhood","city","state","country","countryCode","updatedAt","createdAt","json","Date","geoData","now","geometry","lat","lng","components","postcode","house_number","road","suburb","country_code"],"mappings":"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","sourcesContent":["export default class Address {\r\n  public latitude?: number;\r\n  public longitude?: number;\r\n  public postalCode?: string;\r\n  public number?: string;\r\n  public street?: string;\r\n  public neighborhood?: string;\r\n  public city?: string;\r\n  public state?: string;\r\n  public country?: string;\r\n  public countryCode?: string;\r\n  public updatedAt?: Date;\r\n  public createdAt?: Date;\r\n\r\n  public constructor(\r\n    latitude: number,\r\n    longitude: number,\r\n    postalCode: string,\r\n    number: string,\r\n    street: string,\r\n    neighborhood: string,\r\n    city: string,\r\n    state: string,\r\n    country: string,\r\n    countryCode: string,\r\n    updatedAt: Date,\r\n    createdAt: Date\r\n  ) {\r\n    this.latitude = latitude;\r\n    this.longitude = longitude;\r\n    this.postalCode = postalCode;\r\n    this.number = number;\r\n    this.street = street;\r\n    this.neighborhood = neighborhood;\r\n    this.city = city;\r\n    this.state = state;\r\n    this.country = country;\r\n    this.countryCode = countryCode;\r\n    this.updatedAt = updatedAt;\r\n    this.createdAt = createdAt;\r\n  }\r\n\r\n  public static fromJson(json: any) : Address {\r\n    return new Address(\r\n      json?.latitude,\r\n      json?.longitude,\r\n      json?.postalCode,\r\n      json?.number,\r\n      json?.street,\r\n      json?.neighborhood,\r\n      json?.city,\r\n      json?.state,\r\n      json?.country,\r\n      json?.countryCode,\r\n      new Date(json?.updatedAt),\r\n      new Date(json?.createdAt)\r\n    );\r\n  }\r\n\r\n  public toJson() : Object {\r\n    return {\r\n      latitude: this?.latitude,\r\n      longitude: this?.longitude,\r\n      postalCode: this?.postalCode,\r\n      number: this?.number,\r\n      street: this?.street,\r\n      neighborhood: this?.neighborhood,\r\n      city: this?.city,\r\n      state: this?.state,\r\n      country: this?.country,\r\n      countryCode: this?.countryCode,\r\n      updatedAt: this?.updatedAt,\r\n      createdAt: this?.createdAt\r\n    };\r\n  }\r\n\r\n  public static fromGeocoder(geoData: any) : Address {\r\n    const now = new Date();\r\n\r\n    return new Address(\r\n      geoData.geometry.lat,\r\n      geoData.geometry.lng,\r\n      geoData.components?.postcode,\r\n      geoData.components?.house_number,\r\n      geoData.components?.road,\r\n      geoData.components?.suburb,\r\n      geoData.components?.city,\r\n      geoData.components?.state,\r\n      geoData.components?.country,\r\n      geoData.components?.country_code,\r\n      now, \r\n      now\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}