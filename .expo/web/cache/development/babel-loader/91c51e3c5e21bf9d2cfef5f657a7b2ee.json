{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\robson\\\\Desktop\\\\ifood-react-native\\\\app\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport loadFontsAsync from \"./src/theme/fonts\";\nimport BottomNavigationBar from \"./src/screens/navigation\";\nvar client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql/',\n  cache: new InMemoryCache()\n});\n\nvar App = function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setReady = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(loadFontsAsync().then(function () {\n                setReady(true);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return React.createElement(React.Fragment, null, isReady === true && React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, React.createElement(RecoilRoot, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, React.createElement(BottomNavigationBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/App.tsx"],"names":["React","useState","useEffect","RecoilRoot","ApolloClient","ApolloProvider","InMemoryCache","loadFontsAsync","BottomNavigationBar","client","uri","cache","App","isReady","setReady","then"],"mappings":";;;AACA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,QAGO,OAHP;AAIA,SAASC,UAAT,QAA2B,QAA3B;AAEA,SACEC,YADF,EAEEC,cAFF,EAGEC,aAHF,QAMO,gBANP;AAQA,OAAOC,cAAP;AACA,OAAOC,mBAAP;AAEA,IAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,gCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIL,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,IAAMM,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBACYX,QAAQ,CAAC,KAAD,CADpB;AAAA;AAAA,MACTY,OADS;AAAA,MACAC,QADA;;AAGhBZ,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACOK,cAAc,GAAGQ,IAAjB,CAAsB,YAAM;AAChCD,gBAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,eAFK,CADP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAKD,GANQ,EAMN,EANM,CAAT;AAQA,SACE,0CACGD,OAAO,KAAK,IAAZ,IACC,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAFJ,CADF;AAWD,CAtBD;;AAwBA,eAAeG,GAAf","sourcesContent":["\nimport React, { \n  useState,\n  useEffect \n} from 'react';\nimport { RecoilRoot } from 'recoil';\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  // HttpLink,\n  ApolloLink,\n} from '@apollo/client';\n\nimport loadFontsAsync from './src/theme/fonts';\nimport BottomNavigationBar from './src/screens/navigation';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql/',\n  cache: new InMemoryCache()\n});\n\nconst App = () => {\n  const [isReady, setReady] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      await loadFontsAsync().then(() => {\n        setReady(true);\n      });\n    })(); \n  }, []);\n\n  return (\n    <>\n      {isReady === true && (\n        <ApolloProvider client={client}>\n          <RecoilRoot>\n            <BottomNavigationBar />\n          </RecoilRoot>\n        </ApolloProvider>\n      )}\n    </>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}