{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport * as Location from 'expo-location';\n\nvar GeolocatorService = function GeolocatorService() {\n  _classCallCheck(this, GeolocatorService);\n};\n\nGeolocatorService.apiKey = '1a0f0a33030643ef97bfd6fc409f6b2a';\n\nGeolocatorService.getLocation = function _callee() {\n  var location, url, response, result;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n        case 4:\n          location = _context.sent;\n\n          if (!location) {\n            _context.next = 15;\n            break;\n          }\n\n          url = \"https://api.opencagedata.com/geocode/v1/json?key=\" + GeolocatorService.apiKey + \"&q=\" + location.coords.latitude + \",\" + location.coords.longitude + \"&pretty=1&no_annotations=1\";\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 9:\n          response = _context.sent;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 12:\n          result = _context.sent;\n          console.log(result);\n          return _context.abrupt(\"return\", result.results[0]);\n\n        case 15:\n          return _context.abrupt(\"return\", 'blank');\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport { GeolocatorService as default };","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/src/geolocator/index.ts"],"names":["Location","GeolocatorService","apiKey","getLocation","requestPermissionsAsync","getCurrentPositionAsync","location","url","coords","latitude","longitude","fetch","response","json","result","console","log","results"],"mappings":";;AAAA,OAAO,KAAKA,QAAZ,MAA0B,eAA1B;;IAGqBC,iB;;;;AAAAA,iB,CACZC,M,GAAS,kC;;AADGD,iB,CAEZE,W,GAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACbH,QAAQ,CAACI,uBAAT,EADa;;AAAA;AAAA;AAAA,2CAGIJ,QAAQ,CAACK,uBAAT,CAAiC,EAAjC,CAHJ;;AAAA;AAGbC,UAAAA,QAHa;;AAAA,eAKhBA,QALgB;AAAA;AAAA;AAAA;;AAMXC,UAAAA,GANW,yDAM+CN,iBAAiB,CAACC,MANjE,WAM6EI,QAAQ,CAACE,MAAT,CAAgBC,QAN7F,SAMyGH,QAAQ,CAACE,MAAT,CAAgBE,SANzH;AAAA;AAAA,2CAQMC,KAAK,CAACJ,GAAD,CARX;;AAAA;AAQXK,UAAAA,QARW;AAAA;AAAA,2CASIA,QAAQ,CAACC,IAAT,EATJ;;AAAA;AASXC,UAAAA,MATW;AAWjBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAXiB,2CAaVA,MAAM,CAACG,OAAP,CAAe,CAAf,CAbU;;AAAA;AAAA,2CAgBZ,OAhBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C;;SAFFhB,iB","sourcesContent":["import * as Location from 'expo-location';\r\n\r\n// OpenCageData\r\nexport default class GeolocatorService {\r\n  static apiKey = '1a0f0a33030643ef97bfd6fc409f6b2a';\r\n  static getLocation = async () => {\r\n    await Location.requestPermissionsAsync();\r\n\r\n    const location = await Location.getCurrentPositionAsync({});\r\n\r\n    if(location) {\r\n      const url = `https://api.opencagedata.com/geocode/v1/json?key=${GeolocatorService.apiKey}&q=${location.coords.latitude},${location.coords.longitude}&pretty=1&no_annotations=1`;\r\n      \r\n      const response = await fetch(url);\r\n      const result = await response.json();\r\n\r\n      console.log(result);\r\n\r\n      return result.results[0];\r\n    }\r\n\r\n    return 'blank';\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}