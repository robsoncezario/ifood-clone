{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nvar Address = function Address(latitude, longitude, postalCode, number, street, neighborhood, city, state, country, countryCode, updatedAt, createdAt) {\n  var _this = this;\n\n  _classCallCheck(this, Address);\n\n  this.toJson = function () {\n    return {\n      latitude: _this == null ? void 0 : _this.latitude,\n      longitude: _this == null ? void 0 : _this.longitude,\n      postalCode: _this == null ? void 0 : _this.postalCode,\n      number: _this == null ? void 0 : _this.number,\n      street: _this == null ? void 0 : _this.street,\n      neighborhood: _this == null ? void 0 : _this.neighborhood,\n      city: _this == null ? void 0 : _this.city,\n      state: _this == null ? void 0 : _this.state,\n      country: _this == null ? void 0 : _this.country,\n      countryCode: _this == null ? void 0 : _this.countryCode,\n      updatedAt: _this == null ? void 0 : _this.updatedAt,\n      createdAt: _this == null ? void 0 : _this.createdAt\n    };\n  };\n\n  this.format = function (pattern) {\n    var _this$number, _this$city, _this$state, _this$country, _this$neighborhood, _this$street, _this$countryCode;\n\n    return pattern.replace(new RegExp('%n'), (_this$number = _this == null ? void 0 : _this.number) != null ? _this$number : '').replace(new RegExp('%c'), (_this$city = _this == null ? void 0 : _this.city) != null ? _this$city : '').replace(new RegExp('%S'), (_this$state = _this == null ? void 0 : _this.state) != null ? _this$state : '').replace(new RegExp('%C'), (_this$country = _this == null ? void 0 : _this.country) != null ? _this$country : '').replace(new RegExp('%N'), (_this$neighborhood = _this == null ? void 0 : _this.neighborhood) != null ? _this$neighborhood : '').replace(new RegExp('%s'), (_this$street = _this == null ? void 0 : _this.street) != null ? _this$street : '').replace(new RegExp('%cc'), (_this$countryCode = _this == null ? void 0 : _this.countryCode) != null ? _this$countryCode : '');\n  };\n\n  this.getDistanceBetween = function (address) {\n    var p = 0.017453292519943295;\n    var c = Math.cos;\n    var a = 0.5 - c((address.latitude - _this.latitude) * p) / 2 + c(_this.latitude * p) * c(address.latitude * p) * (1 - c((address.longitude - _this.longitude) * p)) / 2;\n    return 12742 * Math.asin(Math.sqrt(a));\n  };\n\n  this.latitude = latitude;\n  this.longitude = longitude;\n  this.postalCode = postalCode;\n  this.number = number;\n  this.street = street;\n  this.neighborhood = neighborhood;\n  this.city = city;\n  this.state = state;\n  this.country = country;\n  this.countryCode = countryCode;\n  this.updatedAt = updatedAt;\n  this.createdAt = createdAt;\n};\n\nAddress.fromJson = function (json) {\n  return new Address(json == null ? void 0 : json.latitude, json == null ? void 0 : json.longitude, json == null ? void 0 : json.postalCode, json == null ? void 0 : json.number, json == null ? void 0 : json.street, json == null ? void 0 : json.neighborhood, json == null ? void 0 : json.city, json == null ? void 0 : json.state, json == null ? void 0 : json.country, json == null ? void 0 : json.countryCode, new Date(json == null ? void 0 : json.updatedAt), new Date(json == null ? void 0 : json.createdAt));\n};\n\nAddress.fromGeocoder = function (geoData) {\n  var _geoData$components, _geoData$components2, _geoData$components3, _geoData$components4, _geoData$components5, _geoData$components6, _geoData$components7, _geoData$components8;\n\n  var now = new Date();\n  return new Address(geoData.geometry.lat, geoData.geometry.lng, (_geoData$components = geoData.components) == null ? void 0 : _geoData$components.postcode, (_geoData$components2 = geoData.components) == null ? void 0 : _geoData$components2.house_number, (_geoData$components3 = geoData.components) == null ? void 0 : _geoData$components3.road, (_geoData$components4 = geoData.components) == null ? void 0 : _geoData$components4.suburb, (_geoData$components5 = geoData.components) == null ? void 0 : _geoData$components5.city, (_geoData$components6 = geoData.components) == null ? void 0 : _geoData$components6.state, (_geoData$components7 = geoData.components) == null ? void 0 : _geoData$components7.country, (_geoData$components8 = geoData.components) == null ? void 0 : _geoData$components8.country_code, now, now);\n};\n\nexport { Address as default };","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/src/models/Address/model.ts"],"names":["Address","latitude","longitude","postalCode","number","street","neighborhood","city","state","country","countryCode","updatedAt","createdAt","toJson","format","pattern","replace","RegExp","getDistanceBetween","address","p","c","Math","cos","a","asin","sqrt","fromJson","json","Date","fromGeocoder","geoData","now","geometry","lat","lng","components","postcode","house_number","road","suburb","country_code"],"mappings":"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","sourcesContent":["export default class Address {\r\n  public latitude!: number;\r\n  public longitude!: number;\r\n  public postalCode?: string;\r\n  public number?: string;\r\n  public street?: string;\r\n  public neighborhood?: string;\r\n  public city?: string;\r\n  public state?: string;\r\n  public country?: string;\r\n  public countryCode?: string;\r\n  public updatedAt?: Date;\r\n  public createdAt?: Date;\r\n\r\n  public constructor(\r\n    latitude: number,\r\n    longitude: number,\r\n    postalCode: string,\r\n    number: string,\r\n    street: string,\r\n    neighborhood: string,\r\n    city: string,\r\n    state: string,\r\n    country: string,\r\n    countryCode: string,\r\n    updatedAt: Date,\r\n    createdAt: Date\r\n  ) {\r\n    this.latitude = latitude;\r\n    this.longitude = longitude;\r\n    this.postalCode = postalCode;\r\n    this.number = number;\r\n    this.street = street;\r\n    this.neighborhood = neighborhood;\r\n    this.city = city;\r\n    this.state = state;\r\n    this.country = country;\r\n    this.countryCode = countryCode;\r\n    this.updatedAt = updatedAt;\r\n    this.createdAt = createdAt;\r\n  }\r\n\r\n  public static fromJson = (json: any): Address => {\r\n    return new Address(\r\n      json?.latitude,\r\n      json?.longitude,\r\n      json?.postalCode,\r\n      json?.number,\r\n      json?.street,\r\n      json?.neighborhood,\r\n      json?.city,\r\n      json?.state,\r\n      json?.country,\r\n      json?.countryCode,\r\n      new Date(json?.updatedAt),\r\n      new Date(json?.createdAt)\r\n    );\r\n  }\r\n\r\n  public toJson = (): Object => {\r\n    return {\r\n      latitude: this?.latitude,\r\n      longitude: this?.longitude,\r\n      postalCode: this?.postalCode,\r\n      number: this?.number,\r\n      street: this?.street,\r\n      neighborhood: this?.neighborhood,\r\n      city: this?.city,\r\n      state: this?.state,\r\n      country: this?.country,\r\n      countryCode: this?.countryCode,\r\n      updatedAt: this?.updatedAt,\r\n      createdAt: this?.createdAt\r\n    };\r\n  }\r\n\r\n  public static fromGeocoder = (geoData: any) : Address => {\r\n    const now = new Date();\r\n\r\n    return new Address(\r\n      geoData.geometry.lat,\r\n      geoData.geometry.lng,\r\n      geoData.components?.postcode,\r\n      geoData.components?.house_number,\r\n      geoData.components?.road,\r\n      geoData.components?.suburb,\r\n      geoData.components?.city,\r\n      geoData.components?.state,\r\n      geoData.components?.country,\r\n      geoData.components?.country_code,\r\n      now, \r\n      now\r\n    );\r\n  }\r\n\r\n  public format = (pattern: string): string => {\r\n    return pattern.replace(new RegExp('%n'), this?.number ?? '')\r\n                  .replace(new RegExp('%c'), this?.city ?? '')\r\n                  .replace(new RegExp('%S'), this?.state ?? '')\r\n                  .replace(new RegExp('%C'), this?.country ?? '')\r\n                  .replace(new RegExp('%N'), this?.neighborhood ?? '')\r\n                  .replace(new RegExp('%s'), this?.street ?? '')\r\n                  .replace(new RegExp('%cc'), this?.countryCode ?? '');\r\n  }\r\n\r\n  // A fórmula de Haversine me retorna me retorna a distância entre dois pontos.\r\n  // https://en.wikipedia.org/wiki/Haversine_formula\r\n  public getDistanceBetween = (address: Address): number => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((address.latitude - this.latitude) * p)/2 + \r\n            c(this.latitude * p) * c(address.latitude * p) * \r\n            (1 - c((address.longitude - this.longitude) * p))/2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}