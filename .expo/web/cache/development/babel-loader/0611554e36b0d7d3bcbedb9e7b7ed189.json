{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar Rating = function () {\n  function Rating(id, customerId, value, createdAt, updatedAt) {\n    _classCallCheck(this, Rating);\n\n    this.id = id;\n    this.customerId = customerId;\n    this.value = value;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n  }\n\n  _createClass(Rating, [{\n    key: \"toJson\",\n    value: function toJson() {\n      var _this$createdAt, _this$updatedAt;\n\n      return {\n        id: this.id,\n        customerId: this.customerId,\n        value: this.value,\n        createdAt: (_this$createdAt = this.createdAt) == null ? void 0 : _this$createdAt.toISOString(),\n        updatedAt: (_this$updatedAt = this.updatedAt) == null ? void 0 : _this$updatedAt.toISOString()\n      };\n    }\n  }]);\n\n  return Rating;\n}();\n\nRating.fromJson = function (json) {\n  return new Rating(json == null ? void 0 : json.id, json == null ? void 0 : json.customerId, json == null ? void 0 : json.value, new Date(json == null ? void 0 : json.createdAt), new Date(json == null ? void 0 : json.updatedAt));\n};\n\nRating.getAverage = function (list) {\n  return list.map(function (r) {\n    return r.value;\n  }).reduce(function (a, b) {\n    return a + b;\n  }) / list.length;\n};\n\nexport { Rating as default };","map":{"version":3,"sources":["C:/Users/robson/Desktop/ifood-react-native/app/src/models/Rating/model.ts"],"names":["Rating","id","customerId","value","createdAt","updatedAt","toISOString","fromJson","json","Date","getAverage","list","map","r","reduce","a","b","length"],"mappings":";;;IAAqBA,M;AAOnB,kBACEC,EADF,EAEEC,UAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,SALF,EAME;AAAA;;AACA,SAAKJ,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;;;6BAgBqB;AAAA;;AACpB,aAAO;AACLJ,QAAAA,EAAE,EAAE,KAAKA,EADJ;AAELC,QAAAA,UAAU,EAAE,KAAKA,UAFZ;AAGLC,QAAAA,KAAK,EAAE,KAAKA,KAHP;AAILC,QAAAA,SAAS,qBAAE,KAAKA,SAAP,qBAAE,gBAAgBE,WAAhB,EAJN;AAKLD,QAAAA,SAAS,qBAAE,KAAKA,SAAP,qBAAE,gBAAgBC,WAAhB;AALN,OAAP;AAOD;;;;;;AA3CkBN,M,CAyBLO,Q,GAAW,UAACC,IAAD,EAAyB;AAChD,SAAO,IAAIR,MAAJ,CACLQ,IADK,oBACLA,IAAI,CAAEP,EADD,EAELO,IAFK,oBAELA,IAAI,CAAEN,UAFD,EAGLM,IAHK,oBAGLA,IAAI,CAAEL,KAHD,EAIL,IAAIM,IAAJ,CAASD,IAAT,oBAASA,IAAI,CAAEJ,SAAf,CAJK,EAKL,IAAIK,IAAJ,CAASD,IAAT,oBAASA,IAAI,CAAEH,SAAf,CALK,CAAP;AAOD,C;;AAjCkBL,M,CA6CLU,U,GAAa,UAACC,IAAD,EAAoB;AAC7C,SAAOA,IAAI,CAACC,GAAL,CAAS,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACV,KAAN;AAAA,GAAV,EACKW,MADL,CACY,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,GAAGC,CAAd;AAAA,GADZ,IAC+BL,IAAI,CAACM,MAD3C;AAED,C;;SAhDkBjB,M","sourcesContent":["export default class Rating {\r\n  public id!: number;\r\n  public customerId!: number;\r\n  public value!: number;\r\n  public createdAt!: Date;\r\n  public updatedAt!: Date;\r\n\r\n  public constructor(\r\n    id: number,\r\n    customerId: number,\r\n    value: number,\r\n    createdAt: Date,\r\n    updatedAt: Date\r\n  ) {\r\n    this.id = id;\r\n    this.customerId = customerId;\r\n    this.value = value;\r\n    this.createdAt = createdAt;\r\n    this.updatedAt = updatedAt;\r\n  }\r\n\r\n  /*\r\n    O GraphQL manda o DateTime de forma perfeita para o parse no TS\r\n  */\r\n\r\n  public static fromJson = (json : any) : Rating => {\r\n    return new Rating(\r\n      json?.id,\r\n      json?.customerId, \r\n      json?.value, \r\n      new Date(json?.createdAt as string),\r\n      new Date(json?.updatedAt as string)\r\n    );\r\n  }\r\n\r\n  public toJson() : any {\r\n    return {\r\n      id: this.id, \r\n      customerId: this.customerId,\r\n      value: this.value,\r\n      createdAt: this.createdAt?.toISOString(),\r\n      updatedAt: this.updatedAt?.toISOString()\r\n    }\r\n  }\r\n\r\n  public static getAverage = (list: Rating[]) => {\r\n    return list.map(r => r.value)\r\n               .reduce((a, b) => a + b) / list.length;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}